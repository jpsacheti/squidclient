/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.fema.squidclient.telas;

import br.edu.fema.squidclient.service.AuthUserSquidService;
import br.edu.fema.squidclient.service.BlackListSquidService;
import br.edu.fema.squidclient.service.CacheSizeSquidService;
import br.edu.fema.squidclient.service.FileExtensionSquidService;
import br.edu.fema.squidclient.service.TimeRuleSquidService;
import br.edu.fema.squidclient.service.WhiteListSquidService;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;

public class MenuInicial extends javax.swing.JFrame {
    
    private final AuthUserSquidService authUserService;
    private final BlackListSquidService blackListService;
    private final CacheSizeSquidService cacheSquidService;
    private final FileExtensionSquidService fileExtService;
    private final TimeRuleSquidService timeRuleService;
    private final WhiteListSquidService whiteListService;
    private final String url;
    
    public MenuInicial(String url) {
        this.url = url;
        authUserService = new AuthUserSquidService(url);
        blackListService = new BlackListSquidService(url);
        cacheSquidService = new CacheSizeSquidService(url);
        fileExtService = new FileExtensionSquidService(url);
        timeRuleService = new TimeRuleSquidService(url);
        whiteListService = new WhiteListSquidService(url);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar = new javax.swing.JMenuBar();
        blackListMenu = new javax.swing.JMenu();
        ipBlacklistMenu = new javax.swing.JMenu();
        blackListIpAdd = new javax.swing.JMenuItem();
        blackListIpRemove = new javax.swing.JMenuItem();
        blackListIpList = new javax.swing.JMenuItem();
        blackListIpFlush = new javax.swing.JMenuItem();
        urlBlackListMenu = new javax.swing.JMenu();
        blackListUrlAdd = new javax.swing.JMenuItem();
        blackListUrlRemove = new javax.swing.JMenuItem();
        blackListUrlList = new javax.swing.JMenuItem();
        blackListUrlFlush = new javax.swing.JMenuItem();
        extBlackList = new javax.swing.JMenu();
        blackListExtlAdd = new javax.swing.JMenuItem();
        blackListExtRemove = new javax.swing.JMenuItem();
        blackListExtList = new javax.swing.JMenuItem();
        blackListExtFlush = new javax.swing.JMenuItem();
        whiteListMenu = new javax.swing.JMenu();
        ipWhiteListMenu = new javax.swing.JMenu();
        whiteListIpAdd = new javax.swing.JMenuItem();
        whiteListIpRemove = new javax.swing.JMenuItem();
        whiteListIpList = new javax.swing.JMenuItem();
        whiteListIpFlush = new javax.swing.JMenuItem();
        urlWhiteListMenu = new javax.swing.JMenu();
        whiteListUrlAdd = new javax.swing.JMenuItem();
        whiteListUrlRemove = new javax.swing.JMenuItem();
        whiteListUrlList = new javax.swing.JMenuItem();
        whiteListUrlFlush = new javax.swing.JMenuItem();
        usuariosMenu = new javax.swing.JMenu();
        usuarioAdd = new javax.swing.JMenuItem();
        usuarioRemove = new javax.swing.JMenuItem();
        usuarioList = new javax.swing.JMenuItem();
        usuarioFlush = new javax.swing.JMenuItem();
        timeRuleMenu = new javax.swing.JMenu();
        timeRuleAdd = new javax.swing.JMenuItem();
        timeRuleRemove = new javax.swing.JMenuItem();
        timeRuleList = new javax.swing.JMenuItem();
        timeRuleFlush = new javax.swing.JMenuItem();
        cacheMenu = new javax.swing.JMenu();
        cacheSizeAdd = new javax.swing.JMenuItem();
        cacheSizeFlush = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        blackListMenu.setMnemonic('f');
        blackListMenu.setText("Blacklist");

        ipBlacklistMenu.setText("IP");

        blackListIpAdd.setText("Adicionar");
        blackListIpAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackListIpAddActionPerformed(evt);
            }
        });
        ipBlacklistMenu.add(blackListIpAdd);

        blackListIpRemove.setText("Remover");
        blackListIpRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackListIpRemoveActionPerformed(evt);
            }
        });
        ipBlacklistMenu.add(blackListIpRemove);

        blackListIpList.setText("Listar");
        blackListIpList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackListIpListActionPerformed(evt);
            }
        });
        ipBlacklistMenu.add(blackListIpList);

        blackListIpFlush.setText("Limpar tudo");
        blackListIpFlush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackListIpFlushActionPerformed(evt);
            }
        });
        ipBlacklistMenu.add(blackListIpFlush);

        blackListMenu.add(ipBlacklistMenu);

        urlBlackListMenu.setText("URL");

        blackListUrlAdd.setText("Adicionar");
        blackListUrlAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackListUrlAddActionPerformed(evt);
            }
        });
        urlBlackListMenu.add(blackListUrlAdd);

        blackListUrlRemove.setText("Remover");
        blackListUrlRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackListUrlRemoveActionPerformed(evt);
            }
        });
        urlBlackListMenu.add(blackListUrlRemove);

        blackListUrlList.setText("Listar");
        blackListUrlList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackListUrlListActionPerformed(evt);
            }
        });
        urlBlackListMenu.add(blackListUrlList);

        blackListUrlFlush.setText("Limpar tudo");
        blackListUrlFlush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackListUrlFlushActionPerformed(evt);
            }
        });
        urlBlackListMenu.add(blackListUrlFlush);

        blackListMenu.add(urlBlackListMenu);

        extBlackList.setText("Extens√£o");

        blackListExtlAdd.setText("Adicionar");
        blackListExtlAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackListExtlAddActionPerformed(evt);
            }
        });
        extBlackList.add(blackListExtlAdd);

        blackListExtRemove.setText("Remover");
        extBlackList.add(blackListExtRemove);

        blackListExtList.setText("Listar");
        blackListExtList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackListExtListActionPerformed(evt);
            }
        });
        extBlackList.add(blackListExtList);

        blackListExtFlush.setText("Limpar tudo");
        blackListExtFlush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackListExtFlushActionPerformed(evt);
            }
        });
        extBlackList.add(blackListExtFlush);

        blackListMenu.add(extBlackList);

        menuBar.add(blackListMenu);

        whiteListMenu.setMnemonic('e');
        whiteListMenu.setText("Whitelist");

        ipWhiteListMenu.setText("IP");

        whiteListIpAdd.setText("Adicionar");
        whiteListIpAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteListIpAddActionPerformed(evt);
            }
        });
        ipWhiteListMenu.add(whiteListIpAdd);

        whiteListIpRemove.setText("Remover");
        whiteListIpRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteListIpRemoveActionPerformed(evt);
            }
        });
        ipWhiteListMenu.add(whiteListIpRemove);

        whiteListIpList.setText("Listar");
        whiteListIpList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteListIpListActionPerformed(evt);
            }
        });
        ipWhiteListMenu.add(whiteListIpList);

        whiteListIpFlush.setText("Limpar tudo");
        whiteListIpFlush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteListIpFlushActionPerformed(evt);
            }
        });
        ipWhiteListMenu.add(whiteListIpFlush);

        whiteListMenu.add(ipWhiteListMenu);

        urlWhiteListMenu.setText("URL");

        whiteListUrlAdd.setText("Adicionar");
        whiteListUrlAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteListUrlAddActionPerformed(evt);
            }
        });
        urlWhiteListMenu.add(whiteListUrlAdd);

        whiteListUrlRemove.setText("Remover");
        whiteListUrlRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteListUrlRemoveActionPerformed(evt);
            }
        });
        urlWhiteListMenu.add(whiteListUrlRemove);

        whiteListUrlList.setText("Listar");
        whiteListUrlList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteListUrlListActionPerformed(evt);
            }
        });
        urlWhiteListMenu.add(whiteListUrlList);

        whiteListUrlFlush.setText("Limpar tudo");
        whiteListUrlFlush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteListUrlFlushActionPerformed(evt);
            }
        });
        urlWhiteListMenu.add(whiteListUrlFlush);

        whiteListMenu.add(urlWhiteListMenu);

        menuBar.add(whiteListMenu);

        usuariosMenu.setMnemonic('h');
        usuariosMenu.setText("Usuarios");

        usuarioAdd.setText("Adicionar");
        usuarioAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuarioAddActionPerformed(evt);
            }
        });
        usuariosMenu.add(usuarioAdd);

        usuarioRemove.setText("Remover");
        usuarioRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuarioRemoveActionPerformed(evt);
            }
        });
        usuariosMenu.add(usuarioRemove);

        usuarioList.setText("Listar");
        usuarioList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuarioListActionPerformed(evt);
            }
        });
        usuariosMenu.add(usuarioList);

        usuarioFlush.setText("Limpar tudo");
        usuarioFlush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuarioFlushActionPerformed(evt);
            }
        });
        usuariosMenu.add(usuarioFlush);

        menuBar.add(usuariosMenu);

        timeRuleMenu.setText("Regra de tempo");

        timeRuleAdd.setText("Adicionar");
        timeRuleAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeRuleAddActionPerformed(evt);
            }
        });
        timeRuleMenu.add(timeRuleAdd);

        timeRuleRemove.setText("Remover");
        timeRuleRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeRuleRemoveActionPerformed(evt);
            }
        });
        timeRuleMenu.add(timeRuleRemove);

        timeRuleList.setText("Listar");
        timeRuleList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeRuleListActionPerformed(evt);
            }
        });
        timeRuleMenu.add(timeRuleList);

        timeRuleFlush.setText("Limpar tudo");
        timeRuleFlush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeRuleFlushActionPerformed(evt);
            }
        });
        timeRuleMenu.add(timeRuleFlush);

        menuBar.add(timeRuleMenu);

        cacheMenu.setText("Cache");

        cacheSizeAdd.setText("Configurar");
        cacheSizeAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cacheSizeAddActionPerformed(evt);
            }
        });
        cacheMenu.add(cacheSizeAdd);

        cacheSizeFlush.setText("Limpar");
        cacheSizeFlush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cacheSizeFlushActionPerformed(evt);
            }
        });
        cacheMenu.add(cacheSizeFlush);

        menuBar.add(cacheMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 55, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void blackListIpAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackListIpAddActionPerformed
        String entrada = JOptionPane.showInputDialog(rootPane, "Informe o valor:");
        boolean sucesso = blackListService.addIp(entrada);
        if (sucesso) {
            JOptionPane.showMessageDialog(rootPane, "Inserido com sucesso!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Falhou!");
        }
    }//GEN-LAST:event_blackListIpAddActionPerformed

    private void blackListIpListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackListIpListActionPerformed
        String resultado = blackListService.listIp().stream().collect(Collectors.joining("\n", "Resultado da consulta:", ""));
        JOptionPane.showMessageDialog(null, resultado);
    }//GEN-LAST:event_blackListIpListActionPerformed

    private void blackListIpFlushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackListIpFlushActionPerformed
        Integer result = JOptionPane.showConfirmDialog(null, "Deseja mesmo limpar tudo?", "Deseja mesmo limpar tudo?", JOptionPane.YES_NO_OPTION);
        if (result.equals(JOptionPane.YES_OPTION)) {
            blackListService.flushIp();
        }
    }//GEN-LAST:event_blackListIpFlushActionPerformed

    private void blackListUrlListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackListUrlListActionPerformed
        String resultado = blackListService.listUrl().stream().collect(Collectors.joining("\n", "Resultado da consulta:", ""));
        JOptionPane.showMessageDialog(null, resultado);
    }//GEN-LAST:event_blackListUrlListActionPerformed

    private void blackListUrlFlushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackListUrlFlushActionPerformed
        Integer result = JOptionPane.showConfirmDialog(null, "Deseja mesmo limpar tudo?", "Deseja mesmo limpar tudo?", JOptionPane.YES_NO_OPTION);
        if (result.equals(JOptionPane.YES_OPTION)) {
            blackListService.flushUrl();
        }
    }//GEN-LAST:event_blackListUrlFlushActionPerformed

    private void blackListExtListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackListExtListActionPerformed
        String resultado = fileExtService.listar().stream().collect(Collectors.joining("\n", "Resultado da consulta:", ""));
        JOptionPane.showMessageDialog(null, resultado);
    }//GEN-LAST:event_blackListExtListActionPerformed

    private void blackListExtFlushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackListExtFlushActionPerformed
        Integer result = JOptionPane.showConfirmDialog(null, "Deseja mesmo limpar tudo?", "Deseja mesmo limpar tudo?", JOptionPane.YES_NO_OPTION);
        if (result.equals(JOptionPane.YES_OPTION)) {
            fileExtService.flush();
        }
    }//GEN-LAST:event_blackListExtFlushActionPerformed

    private void whiteListIpListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteListIpListActionPerformed
        String resultado = whiteListService.listIp().stream().collect(Collectors.joining("\n", "Resultado da consulta:", ""));
        JOptionPane.showMessageDialog(null, resultado);
    }//GEN-LAST:event_whiteListIpListActionPerformed

    private void whiteListIpFlushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteListIpFlushActionPerformed
        Integer result = JOptionPane.showConfirmDialog(null, "Deseja mesmo limpar tudo?", "Deseja mesmo limpar tudo?", JOptionPane.YES_NO_OPTION);
        if (result.equals(JOptionPane.YES_OPTION)) {
            whiteListService.flushIp();
        }
    }//GEN-LAST:event_whiteListIpFlushActionPerformed

    private void whiteListUrlListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteListUrlListActionPerformed
        String resultado = whiteListService.listUrl().stream().collect(Collectors.joining("\n", "Resultado da consulta:", ""));
        JOptionPane.showMessageDialog(null, resultado);
    }//GEN-LAST:event_whiteListUrlListActionPerformed

    private void whiteListUrlFlushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteListUrlFlushActionPerformed
        Integer result = JOptionPane.showConfirmDialog(null, "Deseja mesmo limpar tudo?", "Deseja mesmo limpar tudo?", JOptionPane.YES_NO_OPTION);
        if (result.equals(JOptionPane.YES_OPTION)) {
            whiteListService.flushUrl();
        }
    }//GEN-LAST:event_whiteListUrlFlushActionPerformed

    private void usuarioListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuarioListActionPerformed
        String resultado = authUserService.listar().stream().map(au -> au.getCodigo() + " - " + au.getUsername()).collect(Collectors.joining("\n", "Resultado da consulta:", ""));
        JOptionPane.showMessageDialog(null, resultado);
    }//GEN-LAST:event_usuarioListActionPerformed

    private void usuarioFlushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuarioFlushActionPerformed
        Integer result = JOptionPane.showConfirmDialog(null, "Deseja mesmo limpar tudo?", "Deseja mesmo limpar tudo?", JOptionPane.YES_NO_OPTION);
        if (result.equals(JOptionPane.YES_OPTION)) {
            authUserService.flush();
        }
    }//GEN-LAST:event_usuarioFlushActionPerformed

    private void timeRuleListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeRuleListActionPerformed
        String resultado = timeRuleService.listar().stream().map((timeRule) -> timeRule.toString()).collect(Collectors.joining("\n", "Resultado da consulta:", ""));
        JOptionPane.showMessageDialog(null, resultado);
    }//GEN-LAST:event_timeRuleListActionPerformed

    private void timeRuleFlushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeRuleFlushActionPerformed
        Integer result = JOptionPane.showConfirmDialog(null, "Deseja mesmo limpar tudo?", "Deseja mesmo limpar tudo?", JOptionPane.YES_NO_OPTION);
        if (result.equals(JOptionPane.YES_OPTION)) {
            timeRuleService.flush();
        }
    }//GEN-LAST:event_timeRuleFlushActionPerformed

    private void cacheSizeFlushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cacheSizeFlushActionPerformed
        Integer result = JOptionPane.showConfirmDialog(null, "Deseja mesmo limpar tudo?", "Deseja mesmo limpar tudo?", JOptionPane.YES_NO_OPTION);
        if (result.equals(JOptionPane.YES_OPTION)) {
            cacheSquidService.reset();
        }
    }//GEN-LAST:event_cacheSizeFlushActionPerformed

    private void blackListUrlAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackListUrlAddActionPerformed
        String entrada = JOptionPane.showInputDialog(rootPane, "Informe o valor:");
        boolean sucesso = blackListService.addUrl(entrada);
        if (sucesso) {
            JOptionPane.showMessageDialog(rootPane, "Inserido com sucesso!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Falhou!");
        }
    }//GEN-LAST:event_blackListUrlAddActionPerformed

    private void blackListExtlAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackListExtlAddActionPerformed
        String entrada = JOptionPane.showInputDialog(rootPane, "Informe o valor:");
        boolean sucesso = fileExtService.extensao(entrada);
        if (sucesso) {
            JOptionPane.showMessageDialog(rootPane, "Inserido com sucesso!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Falhou!");
        }
    }//GEN-LAST:event_blackListExtlAddActionPerformed

    private void whiteListIpAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteListIpAddActionPerformed
        String entrada = JOptionPane.showInputDialog(rootPane, "Informe o valor:");
        boolean sucesso = whiteListService.addIp(entrada);
        if (sucesso) {
            JOptionPane.showMessageDialog(rootPane, "Inserido com sucesso!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Falhou!");
        }
    }//GEN-LAST:event_whiteListIpAddActionPerformed

    private void whiteListUrlAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteListUrlAddActionPerformed
        String entrada = JOptionPane.showInputDialog(rootPane, "Informe o valor:");
        boolean sucesso = whiteListService.addUrl(entrada);
        if (sucesso) {
            JOptionPane.showMessageDialog(rootPane, "Inserido com sucesso!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Falhou!");
        }
    }//GEN-LAST:event_whiteListUrlAddActionPerformed

    private void blackListIpRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackListIpRemoveActionPerformed
        String entrada = JOptionPane.showInputDialog(rootPane, "Informe o valor:");
        boolean sucesso = blackListService.removeIp(entrada);
        if (sucesso) {
            JOptionPane.showMessageDialog(rootPane, "Removido com sucesso!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Falhou!");
        }
    }//GEN-LAST:event_blackListIpRemoveActionPerformed

    private void blackListUrlRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackListUrlRemoveActionPerformed
        String entrada = JOptionPane.showInputDialog(rootPane, "Informe o valor:");
        boolean sucesso = blackListService.removeUrl(entrada);
        if (sucesso) {
            JOptionPane.showMessageDialog(rootPane, "Removido com sucesso!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Falhou!");
        }
    }//GEN-LAST:event_blackListUrlRemoveActionPerformed

    private void whiteListIpRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteListIpRemoveActionPerformed
        String entrada = JOptionPane.showInputDialog(rootPane, "Informe o valor:");
        boolean sucesso = whiteListService.removeIp(entrada);
        if (sucesso) {
            JOptionPane.showMessageDialog(rootPane, "Removido com sucesso!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Falhou!");
        }
    }//GEN-LAST:event_whiteListIpRemoveActionPerformed

    private void whiteListUrlRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteListUrlRemoveActionPerformed
        String entrada = JOptionPane.showInputDialog(rootPane, "Informe o valor:");
        boolean sucesso = whiteListService.removeUrl(entrada);
        if (sucesso) {
            JOptionPane.showMessageDialog(rootPane, "Removido com sucesso!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Falhou!");
        }
    }//GEN-LAST:event_whiteListUrlRemoveActionPerformed

    private void usuarioRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuarioRemoveActionPerformed
        try {
            String entrada = JOptionPane.showInputDialog(rootPane, "Informe o valor:");
            boolean sucesso = authUserService.excluir(Integer.valueOf(entrada));
            if (sucesso) {
                JOptionPane.showMessageDialog(rootPane, "Removido com sucesso!");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Falhou!");
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(rootPane, "Numero inv√°lido");
        }
    }//GEN-LAST:event_usuarioRemoveActionPerformed

    private void timeRuleRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeRuleRemoveActionPerformed
        String entrada = JOptionPane.showInputDialog(rootPane, "Informe o valor:");
        boolean sucesso = timeRuleService.excluir(entrada);
        if (sucesso) {
            JOptionPane.showMessageDialog(rootPane, "Removido com sucesso!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Falhou!");
        }
    }//GEN-LAST:event_timeRuleRemoveActionPerformed

    private void usuarioAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuarioAddActionPerformed
       CadastroUsuario cadastroUsuario = new CadastroUsuario(this, true, url);
       cadastroUsuario.setVisible(true);
    }//GEN-LAST:event_usuarioAddActionPerformed

    private void cacheSizeAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cacheSizeAddActionPerformed
        CadastroCache cadastroCache = new CadastroCache(this, true, url);
    }//GEN-LAST:event_cacheSizeAddActionPerformed

    private void timeRuleAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeRuleAddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeRuleAddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem blackListExtFlush;
    private javax.swing.JMenuItem blackListExtList;
    private javax.swing.JMenuItem blackListExtRemove;
    private javax.swing.JMenuItem blackListExtlAdd;
    private javax.swing.JMenuItem blackListIpAdd;
    private javax.swing.JMenuItem blackListIpFlush;
    private javax.swing.JMenuItem blackListIpList;
    private javax.swing.JMenuItem blackListIpRemove;
    private javax.swing.JMenu blackListMenu;
    private javax.swing.JMenuItem blackListUrlAdd;
    private javax.swing.JMenuItem blackListUrlFlush;
    private javax.swing.JMenuItem blackListUrlList;
    private javax.swing.JMenuItem blackListUrlRemove;
    private javax.swing.JMenu cacheMenu;
    private javax.swing.JMenuItem cacheSizeAdd;
    private javax.swing.JMenuItem cacheSizeFlush;
    private javax.swing.JMenu extBlackList;
    private javax.swing.JMenu ipBlacklistMenu;
    private javax.swing.JMenu ipWhiteListMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem timeRuleAdd;
    private javax.swing.JMenuItem timeRuleFlush;
    private javax.swing.JMenuItem timeRuleList;
    private javax.swing.JMenu timeRuleMenu;
    private javax.swing.JMenuItem timeRuleRemove;
    private javax.swing.JMenu urlBlackListMenu;
    private javax.swing.JMenu urlWhiteListMenu;
    private javax.swing.JMenuItem usuarioAdd;
    private javax.swing.JMenuItem usuarioFlush;
    private javax.swing.JMenuItem usuarioList;
    private javax.swing.JMenuItem usuarioRemove;
    private javax.swing.JMenu usuariosMenu;
    private javax.swing.JMenuItem whiteListIpAdd;
    private javax.swing.JMenuItem whiteListIpFlush;
    private javax.swing.JMenuItem whiteListIpList;
    private javax.swing.JMenuItem whiteListIpRemove;
    private javax.swing.JMenu whiteListMenu;
    private javax.swing.JMenuItem whiteListUrlAdd;
    private javax.swing.JMenuItem whiteListUrlFlush;
    private javax.swing.JMenuItem whiteListUrlList;
    private javax.swing.JMenuItem whiteListUrlRemove;
    // End of variables declaration//GEN-END:variables

}
